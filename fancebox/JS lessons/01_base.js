// Если что-то ищем, то надо набрать в поисковой строке mdn и что ищем. Нам выдадут документацию по JS.


БАЗА
// 1 Переменные - места, в которых мы храним значения.Переменые создаются с помощью оператора "var(использовалось ранее)_название переменной_значение, указанное в переменной". Использование VAR позволяет в дальнейшем изменять название переменной.
// 1.1 Переменные - места, в которых мы храним значения.Переменые создаются с помощью оператора "const(современное использование)_значение -string, указанное в переменной"

// 1.2 Переменные - места, в которых мы храним значения.Переменые создаются с помощью оператора "let(современное использование)_значение - numder, указанное в переменной". Оператор let может принисать значения числа, текста и булевым значением.

// 1.3 console.log - позволяет просматривать полученный результат скрипта в консоли.

// 1.4 Если переменная была задана с помощью ключевого слова let, то мы можем менять её значение .

// 1.5 Предпочтительней использовать оператор const, оператор var стараться не использовать.

// 1.6 Переменная "isProgrammer", в которую мы можем занести значение "true" - boolean.
// 1.6 camelCase - используется с переменными, состоящими из двух слов, например, first_Name,где второе слово указывается через нижний пробел и Заглавную букву. 

// 1.7 JS позволяет использовать код без ";".

// 1.8 Переменная const _private = 'private' - другой вид переменной, валидная переменная
// 1.8 Переменная const _ = 'private' - другой вид переменной, валидная переменная
// 1.8 Переменная $ = 'private' - другой вид переменной, валидная переменная

// 1.9 Переменную const if = "mkef" нельзя использовать, т.к. она включает зарезервированное значение "if".
// 1.9 Переменную const 5withNum = '6' нельзя использовать, т.к. она начинается с числа

// 1.10 Переменная const withNum5 = '5' можно использовать цифры в названиях переменных





// var name = 'Дмитрий'
// const first_Name = 'Артём'
// const last_Name = 'Галкин'
// const age = 41
// const isProgrammer = true
// const _private = 'private'
// const _ = 'private'
// const S = 'private'
// const if = "mkef"
// const 5withNum = '6'
// const withNum5 = '5'


// 2 Мутирование - 

// 2.1 В написание кода можно использовать как одинарные ковычки, так и двойные - одно и тоже. Рекомендую использовать одинарные ковычки.
// 2.1 Позволяет привести числовой аргумент к строке. У объекта age мы вызываем метод to string. Метод to string не обязателен к использованию.

// console.log('Имя человека: ' + first_Name + ', а возраст человека:'+ age)

// 2.2 JS присутствует в разных средах. Функция Alert позволяет взаимодействовать с пользователем, она не присутствует в JS. Она присутствует только в браузере. Функция Alert отсутсвует в мобтльных устройствах, сервере.

// 2.3 Функция prompt позволяет принять какой-либо параметр от пользователя и вывесте в окне броузера с помощью функции alert.
// const lastName = prompt('Введите фамилию')
// alert(first_Name + ' ' + lastName)


// 3. Операторы позволяют взаимодействовать с различным типом переменных 

// 3.1 Оператор (-) позволяет расчитать возраст
// const currentYear = 2022
// const birthYear = 1981
// const age = currentYear - birthYear
//console.log(age)

// 3.2 Оператор (+) позволяет расчитать возраст
// const a = 10
// const b = 5
// console.log(a+b)
// console.log(a-b)
// console.log(a*b)
// console.log(a/b)

// 3.3 Оператор (++ и --) инкременирует значение на 1. Мы сначала инкрементируем на 1, а потом прибавляем текущий год. 
// console.log(++currentYear)
// console.log(--currentYear)
// 3.3 Оператор сложения 1 вариант
// let c = 32
// c = c + a
// c = c - a
// c = c * a
// c = c / a

// console.log(c)
// 3.3 Оператор сложения 2 вариант
// let c = 32
// c += a
// c -= a
// c *= a
// c /= a
// console.log(c)

// 4 Типы данных

// 4.1 Оператор typeof позволяет определить тип данных(приметивы).
// const isProgrammer = true
// const name = 'Артём'
// const age = 41
// console.log(typeof isProgrammer)
// console.log(typeof name)
// console.log(typeof age)
// console.log(typeof true)
// let x
// console.log(typeof x)
// console.log(typeof null)

// 5. Приоритет операторов бывает от 20 до 1 - см.таблицу. https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

// const fullAge = 41
// const birthYear = 1981
// const currentYear = 2022
// >< >= <=
// const isFullAge = (currentYear - birthYear) >=fullAge 
// const isFullAge = currentYear - birthYear >=fullAge  
// console.log(isFullAge)

// 6. Условные операторы

// 6.1 В зависимости от статуса переменной выполняется одно из условий, которое я хочу показать.Переменная может принимать значения ready, fail, pending

// 1 метод
// const courseStatus = 'ready'
// if (courseStatus === 'ready'){
// 	console.log('Курс уже готов и его можно проходить')
// }

// if (courseStatus === 'pending'){
// 	console.log('Курс пока находится в процессе разработки')
// }

//2 метод - c использованием else
// const courseStatus = 'pending'
// if (courseStatus === 'ready'){
// 	console.log('Курс уже готов и его можно проходить')
// }else if (courseStatus === 'pending'){
// 	console.log('Курс пока находится в процессе разработки')
// }

// 3 метод - если не выполняется никакое заданное условие.
// const courseStatus = 'fail'
// if (courseStatus === 'ready'){
// 	console.log('Курс уже готов и его можно проходить')
// }else if (courseStatus === 'pending'){
// 	console.log('Курс пока находится в процессе разработки')
// }else{
// console.log('Курс не получился')
// }



// 6.2 Приминение ==, === 

// Приминение == принимает значение true, т.к. в данной команде приводит к одному типу данных
// Приминение ===(рекомендуемое для использования) принимает значение false, т.к. в данной команде приводит к одному типу данных

// const num1 = 42 //numer
// const num2 ='42' //string
// console.log(num1 === num2)

// 6.3 В зависимости от статуса переменной выполняется одно из условий, которое я хочу показать.
// Переменная может принимать значения ready, fail, pending. 
// Если это у нас буллевое значение, то мы можем писать более короткое значение if
// Если isReady = true, то тогда вывести в консоль сообщение

// 1 метод
// const isReady = true
// if (isReady=== true){
// 	console.log('Всё готово!')
// }

// 2 метод с использованием else
// const isReady = false
// if (isReady=== true){
// 	console.log('Всё готово!')
// } else {
// 	console.log('Всё не готово')
// }

// 6.4 Тернарные выражения в зависимости от значения переменной (true или false ) выдаёт результат.
// const isReady = true
// isReady ? console.log('Всё готово!') : console.log('Всё не готово!')

// 7 Булевая логика (mdn logig operator) оперирует значениями true или false и выдаёт результат
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Expressions_and_Operators

// 8 Функции применяются для того, чтобы оптимизировать какае-то части кода, для того чтобы их не дублировать.

// Создаём функцию, которая будет вычеслять возраст человека по году его рождения.

// 1 метод
// function calculateAge(year){   // Принимает параметр "year"
// 	return 2022 - year   // Возвращает значение из функции
// }
// console.log(myAge)  // Моя переменная

// const myAge = calculateAge(1981) // Моя переменная = вызываем функцию (передаём значение)

// 2 метод
// function calculateAge(year){   // Принимает параметр "year"
// 	return 2020 - year   // Возвращает значение из функции

// }

// console.log(calculateAge(1981))  // Моя переменная = вызываем функцию (передаём значение)
// console.log(calculateAge(1987))
// console.log(calculateAge(1997))


// 8.1 Компазиция функций. Выводит информацию про человека. Функция, которая принимает несколько значений
// function logInfoAbout(name, year){   // Принимает несколько значений (имя и год рождения)
// 	const age = calculateAge(year)   // Вызываем функцию внутри другой функции. Получает значение из функции 8.
// 	console.log('Человек по имени' + ' ' + name + ' ' + 'сейчас имеет возраст' + ' ' + age)
// }
// logInfoAbout('Артём', 1981)
// logInfoAbout('Елена', 1985) // Одна и таже функция, работая с разными параметрами, делает разную логику.

// 8.1.1 Мы можем использовать любые логические операторы прямо внутри функции
// function logInfoAbout(name, year){   // Принимает несколько значений (имя и год рождения)
// 	const age = calculateAge(year)   // Вызываем функцию внутри другой функции. Получает значение из функции 8.
// 	if (age>0){
// 		console.log('Человек по имени' + ' ' + name + ' ' + 'сейчас имеет возраст' + ' ' + age)
// 	}else{
// 		console.log('Вообще-то это уже будущее!' )
// 	}

	
// }
// logInfoAbout('Артём', 1981)
// logInfoAbout('Елена', 1985)
// logInfoAbout('Дмитрий', 2023)

// 9 Создание массива данных.

// 1 метод создания массива, используя [] - правильный вариант!!!
// const cars = ['Мазда', 'Мерседес', 'Форд'] // [] применяются для обозначения массива. 'Мазда', 'Мерседес', 'Форд' - переменные, находящиеся в массиве.
// console.log(cars)

// 2 метод создания массива, используя Array и () - неправильный вариант!!!
// const cars = new Array('Мазда', 'Мерседес', 'Форд') // [] применяются для обозначения массива. 'Мазда', 'Мерседес', 'Форд' - переменные, находящиеся в массиве.
// console.log(cars)

// 9.1 Показать значение из массива, обращаясь к индексу через [], используя определенный индекс
// const cars = ['Мазда', 'Мерседес', 'Форд']
// console.log(cars[1])
// console.log(cars[0])
// console.log(cars[3])

// 9.2 Определить длинну массива, обращаясь к индексу через (.), используя определенный индекс
// const cars = ['Мазда', 'Мерседес', 'Форд']
// console.log(cars.length)

// 9.3 Изменить название переменной в массиве(статический индекс). Добавить переменную в массив 
// const cars = ['Мазда', 'Мерседес', 'Форд']
// console.log(cars.length)
// console.log(cars[1])
// console.log(cars[0])
// console.log(cars[2]) , где [2] -статический индекс 

// cars[0] = 'Ауди'
// cars[4] = 'БМВ'
// console.log(cars)

// 9.4 Также мы можем обращаться к динамическому индексу. Тогда массив будет складывать массив + последний элемент
// const cars = ['Мазда', 'Мерседес', 'Форд']
// console.log(cars.length)
// cars[cars.length] = 'Заданное значение'// Задаем значение, обращаясь к длинне массива, где cars.length - динамический индекс.
// console.log(cars)

// 10 Циклы 
// 10.1 Цикл for - позволяют перебирать массивы

// Метод 1
// const cars = ['Мазда', 'Мерседес', 'Форд']
// for (let i = 0; i < cars.length; i++) { // Создаём переменную 'i', задаём её какое-то начальное значение (0 индекс)для переменной, через ключевое слово "let". Далее мы говори до какого момента нам необходимо итерировать цикл (меньше длины массива cars.length). Тагже обозначаем, что нам надо делать после каждой итерации (i++ - после того как всё завершилось, мы должны увиличить всё на 1).
// 	const car = cars[i]// Обращаемся к текущему индексу i
// 	console.log(car) // Выводим значение переменной
// }

// Метод 1
// const cars = ['Мазда', 'Мерседес', 'Форд']
// for (let car of cars) { // Создаём переменную car, которая является элементом массива cars.
	
// 	console.log(car) // В консоле обращаемся к данной переменной.
// }


// 11 База объектов. Термин "групировка", в объект мы группируем определенное количество различных значений, создавая различные структуры. Таким образом мы можем описывать модели, например: модель человека.
// Метод 1 - неправильный
// const person = new Object(value:{}) // создадим объект person с помощью ключевого слова new Object, передавать какие-то значения

// Метод 2 - правильный // создадим объект person,в котором мы перечисляем ключ и значение.
// const person ={
// 	firstName:'Артём',
// 	lastName: 'Галкин',
// 	year: 1981,
// 	languages:['Ru','En','De'],  // указывается массив
// 	hasWife:false, // указывется булиан значение
// 	greet: function(){ // указывется функция
// 		console.log('greet from person')
// 	}

// }
// console.log(person.firstName) // Обращение через (.), если мы хотим получить конкретные данные из объекта.
// console.log(person['lastName']) // Обращение через фигурные []. Ну тогда нам надо передавать строчку.
// const key = 'year'// Можем получать денамические ключи с помощью переменной key(число).
// const bey = 'languages'// Можем получать денамические ключи с помощью переменной bey(строчка).
// console.log(person[key])//Можем использовать отдельную переменную key (передается значение переменной).
// console.log(person[bey])//Можем использовать отдельную переменную bey (передается значение переменной).
// person.hasWife = true//Любые ключи в объекте можем изменять
// console.log(person)
// person.isProgrammer = true //Можем добовлять новые ключи 
// console.log(person)
// person.greet() //Вызываем метод 




